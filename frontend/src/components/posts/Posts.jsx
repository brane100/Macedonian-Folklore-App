import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './Posts.css';

const Posts = ({ searchQuery = '' }) => {
    const [posts, setPosts] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [filter, setFilter] = useState('all');
    const [sortBy, setSortBy] = useState('newest');

    useEffect(() => {
        fetchApprovedPosts();
    }, []);

    const fetchApprovedPosts = async () => {
        try {
            const response = await fetch('http://localhost:3001/prispevki/odobren', {
                credentials: 'include'
            });
            
            if (response.ok) {
                const data = await response.json();
                setPosts(data);
            } else {
                setError('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—á–∏—Ç—É–≤–∞—ö–µ –Ω–∞ –ø—Ä–∏—Åpev–∫–∏');
            }
        } catch (err) {
            console.error('Error fetching approved posts:', err);
            setError('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ä–∑—É–≤–∞—ö–µ —Å–æ —Å–µ—Ä–≤–µ—Ä–æ—Ç');
        } finally {
            setLoading(false);
        }
    };

    const getRegions = () => {
        const regions = [...new Set(posts.map(post => post.regija).filter(Boolean))];
        return regions;
    };

    const filteredAndSortedPosts = () => {
        let filteredPosts = posts;

        // Filter by search query first
        if (searchQuery && searchQuery.trim() !== '') {
            const query = searchQuery.toLowerCase().trim();
            filteredPosts = filteredPosts.filter(post => {
                const danceName = (post.ime_plesa || '').toLowerCase();
                const danceType = (post.tip_plesa || '').toLowerCase();
                const region = (post.regija || '').toLowerCase();
                const description = (post.opis || '').toLowerCase();
                const shortHistory = (post.kratka_zgodovina || '').toLowerCase();
                const technique = (post.opis_tehnike || '').toLowerCase();
                
                return danceName.includes(query) ||
                       danceType.includes(query) ||
                       region.includes(query) ||
                       description.includes(query) ||
                       shortHistory.includes(query) ||
                       technique.includes(query);
            });
        }

        // Filter by region
        if (filter !== 'all') {
            filteredPosts = filteredPosts.filter(post => post.regija === filter);
        }

        // Sort posts
        switch (sortBy) {
            case 'newest':
                return filteredPosts.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));
            case 'oldest':
                return filteredPosts.sort((a, b) => new Date(a.created_at) - new Date(b.created_at));
            case 'alphabetical':
                return filteredPosts.sort((a, b) => (a.ime_plesa || '').localeCompare(b.ime_plesa || ''));
            default:
                return filteredPosts;
        }
    };

    const formatDate = (dateString) => {
        if (!dateString) return '–ù–µ–ø–æ–∑–Ω–∞—Ç–æ';
        const date = new Date(dateString);
        return date.toLocaleDateString('mk-MK', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    const getAuthorName = (post) => {
        if (post.je_anonimen) {
            return '–ê–Ω–æ–Ω–∏–º–µ–Ω';
        }
        return post.ime && post.priimek ? `${post.ime} ${post.priimek}` : '–ù–µ–ø–æ–∑–Ω–∞—Ç –∞–≤—Ç–æ—Ä';
    };

    const getTipIcon = (tip) => {
        switch (tip) {
            case '–æ–±—Ä–µ–¥–Ω–∏': return '‚õ™';
            case '–ø–æ—Å–≤–µ—Ç–Ω–∏': return 'üé≠';
            case '–û—Ä–æ': return 'üï∫';
            case '–ñ–µ–Ω—Å–∫–æ –æ—Ä–æ': return 'üíÉ';
            case '–ú–∞—à–∫–æ –æ—Ä–æ': return 'üï∫';
            case '–°–æ–±–æ—Ä–Ω–æ –æ—Ä–æ': return 'üë´';
            default: return 'üé≠';
        }
    };

    const getRegijaIcon = (regija) => {
        const regionIcons = {
            '–°–∫–æ–ø—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω': 'üèõÔ∏è',
            '–ü–µ–ª–∞–≥–æ–Ω–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω': 'üåæ',
            '–ò—Å—Ç–æ—á–µ–Ω —Ä–µ–≥–∏–æ–Ω': 'üåÑ',
            '–à—É–≥–æ–∏—Å—Ç–æ—á–µ–Ω —Ä–µ–≥–∏–æ–Ω': 'üóª',
            '–à—É–≥–æ–∑–∞–ø–∞–¥–µ–Ω —Ä–µ–≥–∏–æ–Ω': 'üèîÔ∏è',
            '–í–∞—Ä–¥–∞—Ä—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω': 'üåä',
            '–°–µ–≤–µ—Ä–æ–∏—Å—Ç–æ—á–µ–Ω —Ä–µ–≥–∏–æ–Ω': 'üå≤',
            '–ü–æ–ª–æ—à–∫–∏ —Ä–µ–≥–∏–æ–Ω': 'üåø'
        };
        return regionIcons[regija] || 'üìç';
    };

    if (loading) {
        return (
            <div className="posts-container">
                <div className="loading-spinner">
                    <div className="spinner"></div>
                    <p>–°–µ –≤—á–∏—Ç—É–≤–∞–∞—Ç –ø—Äispev–∫–∏...</p>
                </div>
            </div>
        );
    }

    if (error) {
        return (
            <div className="posts-container">
                <div className="error-message">
                    <h3>‚ùå –ì—Ä–µ—à–∫–∞</h3>
                    <p>{error}</p>
                    <button onClick={fetchApprovedPosts} className="retry-btn">
                        üîÑ –û–±–∏–¥–∏ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
                    </button>
                </div>
            </div>
        );
    }

    return (
        <div className="posts-container">
            <div className="posts-header">
                {searchQuery ? (
                    <>
                        <h1>üîç –†–µ–∑—É–ª—Ç–∞—Ç–∏ –æ–¥ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ</h1>
                        <p>–†–µ–∑—É–ª—Ç–∞—Ç–∏ –∑–∞: "<strong>{searchQuery}</strong>"</p>
                        <div className="search-actions">
                            <Link to="/plesi" className="clear-search-btn">
                                ‚úï –ò—Å—á–∏—Å—Ç–∏ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ
                            </Link>
                        </div>
                    </>
                ) : (
                    <>
                        <h1>üé≠ –§–æ–ª–∫–ª–æ—Ä–Ω–∏ –ø—Äispev–∫–∏</h1>
                        <p>–û–¥–æ–±—Ä–µ–Ω–∏ –ø—Äispev–∫–∏ –∑–∞ –º–∞–∫–µ–¥–æ–Ω—Å–∫–∏ —Ñ–æ–ª–∫–ª–æ—Ä–Ω–∏ –ø–ª–µ—Å–æ–≤–∏ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏</p>
                    </>
                )}
            </div>

            {/* Filters and Sorting */}
            <div className="posts-controls">
                <div className="filter-section">
                    <label htmlFor="region-filter">üìç –§–∏–ª—Ç—Ä–∏—Ä–∞—ò –ø–æ —Ä–µ–≥–∏–æ–Ω:</label>
                    <select 
                        id="region-filter"
                        value={filter} 
                        onChange={(e) => setFilter(e.target.value)}
                        className="filter-select"
                    >
                        <option value="all">–°–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω–∏</option>
                        {getRegions().map(region => (
                            <option key={region} value={region}>
                                {getRegijaIcon(region)} {region}
                            </option>
                        ))}
                    </select>
                </div>

                <div className="sort-section">
                    <label htmlFor="sort-select">üìä –°–æ—Ä—Ç–∏—Ä–∞—ò –ø–æ:</label>
                    <select 
                        id="sort-select"
                        value={sortBy} 
                        onChange={(e) => setSortBy(e.target.value)}
                        className="sort-select"
                    >
                        <option value="newest">–ù–∞—ò–Ω–æ–≤–∏</option>
                        <option value="oldest">–ù–∞—ò—Å—Ç–∞—Ä–∏</option>
                        <option value="alphabetical">–ê–ª—Ñ–∞–±–µ—Ç—Å–∫–∏</option>
                    </select>
                </div>
            </div>

            <div className="posts-stats">
                <span className="stats-item">
                    üìù –í–∫—É–ø–Ω–æ: {posts.length} –ø—Äispev–∫–∏
                </span>
                <span className="stats-item">
                    üîç –ü—Ä–∏–∫–∞–∂–∞–Ω–∏: {filteredAndSortedPosts().length} –ø—Äisp–µ–≤–∫–∏
                </span>
                {searchQuery && (
                    <span className="stats-item search-indicator">
                        üîç –ü—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ: "{searchQuery}"
                    </span>
                )}
            </div>

            {filteredAndSortedPosts().length === 0 ? (
                <div className="no-posts">
                    {searchQuery ? (
                        <>
                            <h3>üîç –ù–µ–º–∞ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏</h3>
                            <p>–ù–µ —Å–µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∏ prispev–∫–∏ —à—Ç–æ —Å–æ–¥—Ä–∂–∞—Ç "{searchQuery}".</p>
                            <div className="no-posts-actions">
                                <Link to="/plesi" className="clear-search-btn">
                                    ‚úï –ò—Å—á–∏—Å—Ç–∏ –ø—Ä–µ–±–∞—Ä—É–≤–∞—ö–µ
                                </Link>
                                <Link to="/dodaj-prispevek" className="add-post-btn">
                                    ‚ûï –î–æ–¥–∞—ò prispevok
                                </Link>
                            </div>
                        </>
                    ) : (
                        <>
                            <h3>üîç –ù–µ–º–∞ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∏ –ø—Äispev–∫–∏</h3>
                            <p>–û–±–∏–¥–µ—Ç–µ —Å–µ —Å–æ —Ä–∞–∑–ª–∏—á–µ–Ω —Ñ–∏–ª—Ç–µ—Ä –∏–ª–∏ –¥–æ–¥–∞—ò—Ç–µ –Ω–æ–≤ prispevok.</p>
                            <Link to="/dodaj-prispevek" className="add-post-btn">
                                ‚ûï –î–æ–¥–∞—ò prispevok
                            </Link>
                        </>
                    )}
                </div>
            ) : (
                <div className="posts-grid">
                    {filteredAndSortedPosts().map(post => (
                        <article key={post.id} className="post-card">
                            <div className="post-card-header">
                                <div className="post-type">
                                    {getTipIcon(post.tip_plesa)} {post.tip_plesa || '–ù–µ–ø–æ–∑–Ω–∞—Ç —Ç–∏–ø'}
                                </div>
                                <div className="post-region">
                                    {getRegijaIcon(post.regija)} {post.regija || '–ù–µ–ø–æ–∑–Ω–∞—Ç —Ä–µ–≥–∏–æ–Ω'}
                                </div>
                            </div>

                            <div className="post-card-content">
                                <h3 className="post-title">
                                    {post.ime_plesa || '–ë–µ–∑ –Ω–∞—Å–ª–æ–≤'}
                                </h3>

                                {post.kratka_zgodovina && (
                                    <div className="post-history">
                                        <h4>üìú –ò—Å—Ç–æ—Ä–∏—ò–∞:</h4>
                                        <p>{post.kratka_zgodovina}</p>
                                    </div>
                                )}

                                {post.opis_tehnike && (
                                    <div className="post-technique">
                                        <h4>üéØ –¢–µ—Ö–Ω–∏–∫–∞:</h4>
                                        <p>{post.opis_tehnike}</p>
                                    </div>
                                )}

                                {post.besedilo_opis && (
                                    <div className="post-description">
                                        <h4>üìù –û–ø–∏—Å:</h4>
                                        <p>{post.besedilo_opis}</p>
                                    </div>
                                )}

                                {post.referenca_opis && (
                                    <div className="post-reference">
                                        <h4>üìö –†–µ—Ñ–µ—Ä–µ–Ω—Ü–∞:</h4>
                                        <p>{post.referenca_opis}</p>
                                        {post.referenca_url && (
                                            <a 
                                                href={post.referenca_url} 
                                                target="_blank" 
                                                rel="noopener noreferrer"
                                                className="reference-link"
                                            >
                                                üîó –ü–æ—Å–µ—Ç–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∞
                                            </a>
                                        )}
                                    </div>
                                )}
                            </div>

                            <div className="post-card-footer">
                                <div className="post-meta">
                                    <span className="post-author">
                                        üë§ {getAuthorName(post)}
                                    </span>
                                    <span className="post-date">
                                        üìÖ {formatDate(post.created_at)}
                                    </span>
                                </div>
                                <div className="post-actions">
                                    <button className="action-btn like-btn" title="–î–æ–ø–∞–¥–Ω–∞ –º–∏ —Å–µ">
                                        ‚ù§Ô∏è <span className="action-count">0</span>
                                    </button>
                                    <button className="action-btn share-btn" title="–°–ø–æ–¥–µ–ª–∏">
                                        üì§
                                    </button>
                                </div>
                            </div>
                        </article>
                    ))}
                </div>
            )}
        </div>
    );
};

export default Posts;
