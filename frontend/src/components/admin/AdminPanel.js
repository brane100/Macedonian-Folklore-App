import React, { useState, useEffect, useCallback } from 'react';
import { useRole, USER_ROLES } from '../RoleBasedAccess';
import { useAuth } from '../../contexts/AuthContext';
import './AdminPanel.css';

const AdminPanel = () => {
    const { userRole, isModerator, isSuperAdmin } = useRole();
    const { user: currentUser } = useAuth(); // Get current logged-in user
    const [activeTab, setActiveTab] = useState('overview');
    const [pendingContributions, setPendingContributions] = useState([]);
    const [users, setUsers] = useState([]);
    const [loading, setLoading] = useState(false);

    // Fetch pending contributions
    const fetchPendingContributions = useCallback(async () => {
        setLoading(true);
        try {
            const response = await fetch('http://localhost:3001/moderacija/pending', {
                credentials: 'include'
            });
            
            if (response.ok) {
                const data = await response.json();
                setPendingContributions(data.data || []);
            }
        } catch (error) {
            console.error('Error fetching pending contributions:', error);
        } finally {
            setLoading(false);
        }
    }, []);

    // Fetch users (SuperAdmin only)
    const fetchUsers = useCallback(async () => {
        if (!isSuperAdmin) return;
        
        setLoading(true);
        try {
            const response = await fetch('http://localhost:3001/moderacija/users', {
                credentials: 'include'
            });
            
            if (response.ok) {
                const data = await response.json();
                setUsers(data.data || []);
            }
        } catch (error) {
            console.error('Error fetching users:', error);
        } finally {
            setLoading(false);
        }
    }, [isSuperAdmin]);

    // Approve contribution
    const approveContribution = async (id, notes = '') => {
        try {
            const response = await fetch(`http://localhost:3001/moderacija/approve/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ moderatorNotes: notes })
            });
            
            if (response.ok) {
                alert('–ü—Äispevok –æ–¥–æ–±—Ä–µ–Ω!');
                fetchPendingContributions(); // Refresh list
            }
        } catch (error) {
            console.error('Error approving contribution:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä—É–≤–∞—ö–µ');
        }
    };

    // Reject contribution
    const rejectContribution = async (id, notes = '') => {
        try {
            const response = await fetch(`http://localhost:3001/moderacija/reject/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ moderatorNotes: notes })
            });
            
            if (response.ok) {
                alert('–ü—Äispevok –æ—Ç—Ñ—Ä–ª–µ–Ω!');
                fetchPendingContributions(); // Refresh list
            }
        } catch (error) {
            console.error('Error rejecting contribution:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –æ—Ç—Ñ—Ä–ª–∞—ö–µ');
        }
    };

    // Request edits for contribution
    const requestEdits = async (id, notes = '') => {
        try {
            const response = await fetch(`http://localhost:3001/moderacija/request-edit/${id}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ moderatorNotes: notes })
            });
            
            if (response.ok) {
                alert('–ë–∞—Ä–∞—ö–µ –∑–∞ –∏–∑–º–µ–Ω–∞ –∏—Å–ø—Ä–∞—Ç–µ–Ω–æ!');
                fetchPendingContributions(); // Refresh list
            }
        } catch (error) {
            console.error('Error requesting edits:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –±–∞—Ä–∞—ö–µ –∑–∞ –∏–∑–º–µ–Ω–∞');
        }
    };

    // Update user role (SuperAdmin only)
    const updateUserRole = async (userId, newRole) => {
        if (!isSuperAdmin) return;
        
        try {
            const response = await fetch(`http://localhost:3001/moderacija/users/${userId}/role`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
                body: JSON.stringify({ newRole })
            });
            
            if (response.ok) {
                alert('–£–ª–æ–≥–∞—Ç–∞ –µ –∞–∂—É—Ä–∏—Ä–∞–Ω–∞!');
                fetchUsers(); // Refresh list
            }
        } catch (error) {
            console.error('Error updating user role:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∞–∂—É—Ä–∏—Ä–∞—ö–µ –Ω–∞ —É–ª–æ–≥–∞—Ç–∞');
        }
    };

    // Delete user (SuperAdmin only)
    const deleteUser = async (userId, userName) => {
        if (!isSuperAdmin) return;
        
        const confirmDelete = window.confirm(
            `–î–∞–ª–∏ —Å—Ç–µ —Å–∏–≥—É—Ä–Ω–∏ –¥–µ–∫–∞ —Å–∞–∫–∞—Ç–µ –¥–∞ –≥–æ –∏–∑–±—Ä–∏—à–µ—Ç–µ –∫–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç "${userName}"?\n\n–û–≤–∞–∞ –∞–∫—Ü–∏—ò–∞ –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –æ—Ç–ø–æ–≤–∏–∫–∞!`
        );
        
        if (!confirmDelete) return;
        
        try {
            const response = await fetch(`http://localhost:3001/moderacija/users/${userId}`, {
                method: 'DELETE',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include'
            });
            
            if (response.ok) {
                alert('–ö–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç –µ —É—Å–ø–µ—à–Ω–æ –∏–∑–±—Ä–∏—à–∞–Ω!');
                fetchUsers(); // Refresh list
            } else {
                const errorData = await response.json();
                alert(errorData.message || '–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –±—Ä–∏—à–µ—ö–µ –Ω–∞ –∫–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç');
            }
        } catch (error) {
            console.error('Error deleting user:', error);
            alert('–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –±—Ä–∏—à–µ—ö–µ –Ω–∞ –∫–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç');
        }
    };

    useEffect(() => {
        if (activeTab === 'moderation') {
            fetchPendingContributions();
        } else if (activeTab === 'users' && isSuperAdmin) {
            fetchUsers();
        }
    }, [activeTab, isSuperAdmin, fetchPendingContributions, fetchUsers]);

    if (!isModerator) {
        return (
            <div className="admin-panel">
                <h2>üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω–∏ –¥–æ–∑–≤–æ–ª–∏</h2>
                <p>–ü–æ—Ç—Ä–µ–±–Ω–∞ –µ —É–ª–æ–≥–∞ Komisija –∏–ª–∏ Superadmin –∑–∞ –ø—Ä–∏—Å—Ç–∞–ø –¥–æ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–æ—Ç.</p>
            </div>
        );
    }

    return (
        <div className="admin-panel">
            <div className="admin-header">
                <h1>üõ°Ô∏è –ê–¥–º–∏–Ω –ü–∞–Ω–µ–ª</h1>
                <div className="user-role-badge">
                    {userRole === USER_ROLES.SUPERADMIN ? 'üëë Superadmin' : '‚öñÔ∏è Komisija'}
                </div>
            </div>

            <div className="admin-tabs">
                <button 
                    className={activeTab === 'overview' ? 'active' : ''}
                    onClick={() => setActiveTab('overview')}
                >
                    üìä –ü—Ä–µ–≥–ª–µ–¥
                </button>
                <button 
                    className={activeTab === 'moderation' ? 'active' : ''}
                    onClick={() => setActiveTab('moderation')}
                >
                    üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—ò–∞
                </button>
                {isSuperAdmin && (
                    <button 
                        className={activeTab === 'users' ? 'active' : ''}
                        onClick={() => setActiveTab('users')}
                    >
                        üë• –ö–æ—Ä–∏—Å–Ω–∏—Ü–∏
                    </button>
                )}
            </div>

            <div className="admin-content">
                {activeTab === 'overview' && (
                    <div className="overview-section">
                        <h2>üìä –ü—Ä–µ–≥–ª–µ–¥ –Ω–∞ —Å–∏—Å—Ç–µ–º–æ—Ç</h2>
                        <div className="stats-grid">
                            <div className="stat-card">
                                <h3>üìÑ Pending Prispevki</h3>
                                <p className="stat-number">{pendingContributions.length}</p>
                            </div>
                            <div className="stat-card">
                                <h3>üë• –í–∫—É–ø–Ω–æ –∫–æ—Ä–∏—Å–Ω–∏—Ü–∏</h3>
                                <p className="stat-number">{users.length}</p>
                            </div>
                        </div>
                    </div>
                )}

                {activeTab === 'moderation' && (
                    <div className="moderation-section">
                        <h2>üìù –ú–æ–¥–µ—Ä–∞—Ü–∏—ò–∞ –Ω–∞ —Å–æ–¥—Ä–∂–∏–Ω–∏</h2>
                        {loading ? (
                            <p>–°–µ –≤—á–∏—Ç—É–≤–∞...</p>
                        ) : pendingContributions.length === 0 ? (
                            <p>üéâ –ù–µ–º–∞ pending prispev–∫–∏ –∑–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—ò–∞!</p>
                        ) : (
                            <div className="contributions-list">
                                {pendingContributions.map(contribution => (
                                    <ContributionCard 
                                        key={contribution.id} 
                                        contribution={contribution}
                                        onApprove={approveContribution}
                                        onReject={rejectContribution}
                                        onRequestEdit={requestEdits}
                                    />
                                ))}
                            </div>
                        )}
                    </div>
                )}

                {activeTab === 'users' && isSuperAdmin && (
                    <div className="users-section">
                        <h2>üë• –£–ø—Ä–∞–≤—É–≤–∞—ö–µ —Å–æ –∫–æ—Ä–∏—Å–Ω–∏—Ü–∏</h2>
                        {loading ? (
                            <p>–°–µ –≤—á–∏—Ç—É–≤–∞...</p>
                        ) : (
                            <div className="users-table">
                                <table>
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>–ò–º–µ</th>
                                            <th>Email</th>
                                            <th>–£–ª–æ–≥–∞</th>
                                            <th>–ê–∫—Ü–∏–∏</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        {users.map(user => (
                                            <tr key={user.id}>
                                                <td>{user.id}</td>
                                                <td>{user.ime} {user.priimek}</td>
                                                <td>{user.email}</td>
                                                <td>
                                                    {currentUser?.id !== user.id ? (
                                                        <select 
                                                            value={user.vloga}
                                                            onChange={(e) => updateUserRole(user.id, e.target.value)}
                                                        >
                                                            <option value={USER_ROLES.USER}>Navaden</option>
                                                        <option value={USER_ROLES.MODERATOR}>Komisija</option>
                                                        <option value={USER_ROLES.SUPERADMIN}>Superadmin</option>
                                                    </select>
                                                    ) : (
                                                        <span>{user.vloga}</span>
                                                    )}
                                                </td>
                                                <td>
                                                    {currentUser?.id !== user.id ? (
                                                        <button 
                                                            className="delete-user-btn"
                                                            onClick={() => deleteUser(user.id, `${user.ime} ${user.priimek}`)}
                                                            style={{
                                                                background: '#dc3545',
                                                                color: 'white',
                                                                border: 'none',
                                                                padding: '0.5rem 1rem',
                                                                borderRadius: '6px',
                                                                cursor: 'pointer',
                                                                fontSize: '0.9rem',
                                                                fontWeight: 'bold'
                                                            }}
                                                        >
                                                            üóëÔ∏è –ò–∑–±—Ä–∏—à–∏
                                                        </button>
                                                    ) : (
                                                        <span style={{ color: '#666', fontStyle: 'italic' }}>
                                                            –¢–µ–∫–æ–≤–µ–Ω –∫–æ—Ä–∏—Å–Ω–∏–∫
                                                        </span>
                                                    )}
                                                </td>
                                            </tr>
                                        ))}
                                    </tbody>
                                </table>
                            </div>
                        )}
                    </div>
                )}
            </div>
        </div>
    );
};

// Individual Contribution Card Component
const ContributionCard = ({ contribution, onApprove, onReject, onRequestEdit }) => {
    const [comment, setComment] = useState('');
    const [showDetails, setShowDetails] = useState(false);

    const getRegionName = (regijaId) => {
        const regionMap = {
            "1": "–ü–µ–ª–∞–≥–æ–Ω–∏—ò–∞",
            "2": "–°–∫–æ–ø—ò–µ", 
            "3": "–í–∞—Ä–¥–∞—Ä—Å–∫–∞ –ú–∞–∫–µ–¥–æ–Ω–∏—ò–∞",
            "4": "–ò—Å—Ç–æ—á–Ω–∞ –ú–∞–∫–µ–¥–æ–Ω–∏—ò–∞",
            "5": "–à—É–≥–æ–∑–∞–ø–∞–¥–µ–Ω –¥–µ–ª",
            "6": "–à—É–≥–æ–∏—Å—Ç–æ—á–µ–Ω –¥–µ–ª",
            "7": "–ü–æ–ª–æ–≥",
            "8": "–°–µ–≤–µ—Ä–æ–∏—Å—Ç–æ—á–µ–Ω –¥–µ–ª"
        };
        return regionMap[regijaId] || '–ù–µ–ø–æ–∑–Ω–∞—Ç–∞ —Ä–µ–≥–∏—ò–∞';
    };

    const handleAction = (action) => {
        if (action === 'approve') {
            onApprove(contribution.id, comment);
        } else if (action === 'reject') {
            onReject(contribution.id, comment);
        } else if (action === 'edit') {
            onRequestEdit(contribution.id, comment);
        }
        setComment(''); // Clear comment after action
    };

    return (
        <div className="contribution-card enhanced">
            <div className="contribution-header">
                <h4>üé≠ Prispevok #{contribution.id}</h4>
                <span className="submission-date">
                    üìÖ {new Date(contribution.datum_ustvarjen).toLocaleDateString('mk-MK')}
                </span>
            </div>

            {/* Basic Info */}
            <div className="contribution-basic-info">
                <div className="info-row">
                    <span className="label">üë§ –¢–∏–ø:</span>
                    <span className="value">{contribution.je_anonimen ? 'üï∂Ô∏è –ê–Ω–æ–Ω–∏–º–µ–Ω' : 'üìù –°–æ –∏–º–µ'}</span>
                </div>
                
                <div className="info-row">
                    <span className="label">üìù –û–ø–∏—Å –ø—Äispevok:</span>
                    <span className="value">{contribution.opis || '–ù–µ–º–∞ –æ–ø–∏—Å'}</span>
                </div>

                <div className="info-row">
                    <span className="label">üìÑ –†–µ—Ñ–µ—Ä–µ–Ω—Ü–∞ –æ–ø–∏—Å:</span>
                    <span className="value">{contribution.referenca_opis || '–ù–µ–º–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∞'}</span>
                </div>

                <div className="info-row">
                    <span className="label">üîó –†–µ—Ñ–µ—Ä–µ–Ω—Ü–∞ URL:</span>
                    <span className="value">
                        {contribution.referenca_url ? (
                            <a href={contribution.referenca_url} target="_blank" rel="noopener noreferrer">
                                {contribution.referenca_url}
                            </a>
                        ) : '–ù–µ–º–∞ URL'}
                    </span>
                </div>
            </div>

            {/* Toggle Details Button */}
            <button 
                className="toggle-details-btn"
                onClick={() => setShowDetails(!showDetails)}
            >
                {showDetails ? 'üîº –°–æ–∫—Ä–∏—ò –¥–µ—Ç–∞–ª–∏' : 'üîΩ –ü—Ä–∏–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏'}
            </button>

            {/* Detailed Dance Information */}
            {showDetails && (
                <div className="contribution-details">
                    <h5>üé™ –î–µ—Ç–∞–ª–∏ –∑–∞ –ø–ª–µ—Å–æ—Ç</h5>
                    
                    <div className="detail-section">
                        <div className="info-row">
                            <span className="label">üé≠ –ò–º–µ –Ω–∞ –ø–ª–µ—Å:</span>
                            <span className="value highlight">{contribution.ime_plesa || '–ù–µdefinirano'}</span>
                        </div>

                        <div className="info-row">
                            <span className="label">üé™ –¢–∏–ø –Ω–∞ –ø–ª–µ—Å:</span>
                            <span className="value">{contribution.tip_plesa || '–ù–µdefinirano'}</span>
                        </div>

                        <div className="info-row">
                            <span className="label">üó∫Ô∏è –†–µ–≥–∏—ò–∞:</span>
                            <span className="value">{getRegionName(contribution.regija_id)}</span>
                        </div>

                        <div className="info-row">
                            <span className="label">üìú –ö—Ä–∞—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞:</span>
                            <span className="value">{contribution.kratka_zgodovina || '–ù–µ–º–∞ –∏—Å—Ç–æ—Ä–∏—ò–∞'}</span>
                        </div>

                        <div className="info-row">
                            <span className="label">üéØ –û–ø–∏—Å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞:</span>
                            <span className="value">{contribution.opis_tehnike || '–ù–µ–º–∞ –æ–ø–∏—Å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–∞'}</span>
                        </div>
                    </div>
                </div>
            )}

            {/* Comment Section */}
            <div className="comment-section">
                <label htmlFor={`comment-${contribution.id}`} className="comment-label">
                    üí¨ –ö–æ–º–µ–Ω—Ç–∞—Ä –∑–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä:
                </label>
                <textarea
                    id={`comment-${contribution.id}`}
                    className="comment-textarea"
                    placeholder="–ù–∞–ø–∏—à–µ—Ç–µ –∫–æ–º–µ–Ω—Ç–∞—Ä –∏–ª–∏ –ø—Ä–∏—á–∏–Ω–∞ –∑–∞ –æ–¥–ª—É–∫–∞—Ç–∞..."
                    value={comment}
                    onChange={(e) => setComment(e.target.value)}
                    rows="3"
                />
            </div>

            {/* Moderation Actions */}
            <div className="moderation-actions enhanced">
                <button 
                    className="approve-btn"
                    onClick={() => handleAction('approve')}
                    title="–û–¥–æ–±—Ä–∏ –≥–æ prispevok-–æ—Ç"
                >
                    ‚úÖ –û–¥–æ–±—Ä–∏
                </button>
                
                <button 
                    className="edit-request-btn"
                    onClick={() => handleAction('edit')}
                    title="–ü–æ–±–∞—Ä–∞—ò –∏–∑–º–µ–Ω–∏ –æ–¥ –∫–æ—Ä–∏—Å–Ω–∏–∫–æ—Ç"
                >
                    ‚úèÔ∏è –ü–æ–±–∞—Ä–∞—ò –∏–∑–º–µ–Ω–∏
                </button>
                
                <button 
                    className="reject-btn"
                    onClick={() => handleAction('reject')}
                    title="–û—Ç—Ñ—Ä–ª–∏ –≥–æ prispevok-–æ—Ç"
                >
                    ‚ùå –û—Ç—Ñ—Ä–ª–∏
                </button>
            </div>
        </div>
    );
};

export default AdminPanel;
